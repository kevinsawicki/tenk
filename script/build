#!/usr/bin/env coffee

async      = require 'async'
fs         = require 'fs-plus'
Handlebars = require 'handlebars'
Humanize   = require 'humanize-plus'
path       = require 'path'
Progress   = require 'progress'

Handlebars.registerHelper 'cash_graph',   require '../src/cash-graph'
Handlebars.registerHelper 'cash_map',     require '../src/cash-map'
Handlebars.registerHelper 'eps_graph',    require '../src/eps-graph'
Handlebars.registerHelper 'eps_map',      require '../src/eps-map'
Handlebars.registerHelper 'google_map',   require '../src/google-map'
Handlebars.registerHelper 'profit_graph', require '../src/profit-graph'
Handlebars.registerHelper 'profit_map',   require '../src/profit-map'

companyTemplate = Handlebars.compile(fs.readFileSync(path.resolve(__dirname, '..', 'company', 'company.hbs'), 'utf8'))
companyJsonFiles = fs.listSync(path.resolve(__dirname, '..', 'company'), ['.json'])

companies = []

progress = new Progress('Buildings page :current/:total [:bar] :percent :eta seconds remaining', {
  incomplete: ' '
  width: 20
  total: companyJsonFiles.length + 1
})

buildPage = (symbolPath, callback) ->
  fs.readFile symbolPath, (error, contents) ->
    return callback(error) if error?

    symbol = path.basename(symbolPath, path.extname(symbolPath))
    company = JSON.parse(contents)
    company.humanizedCash = Humanize.compactInteger(company.cash?[2013] ? 0, 1)
    company.humanizedName = company.name.replace(/,?\s+(inc\.?|company|corp(oration)?)$/i, '')
    companies.push(company)

    fs.writeFile path.resolve(__dirname, '..', 'company', "#{symbol}.html"), companyTemplate(company), (error) ->
      progress.tick(1)
      callback(error)

queue = async.queue(buildPage)
queue.push(companyJsonFile) for companyJsonFile in companyJsonFiles
queue.concurrency = 100

indexTemplate = Handlebars.compile(fs.readFileSync(path.resolve(__dirname, '..', 'index.hbs'), 'utf8'))

states = {}
sectors = {}
companies.forEach ({symbol, address, profit, cash, earningsPerShare, sector}) ->
  profit = profit?[2013] ? 0
  cash = cash?[2013] ? 0
  earningsPerShare = earningsPerShare?[2013] ? 0

  states[address.state] ?=
    state: address.state
    cash: 0
    profit: 0
    earningsPerShare: 0
    companies: 0
  states[address.state].cash += cash
  states[address.state].profit += profit
  states[address.state].earningsPerShare += earningsPerShare
  states[address.state].companies += 1

  if sector
    sectors[sector] ?=
      name: sector
      cash: 0
    sectors[sector].cash += cash

states = (value for key, value of states)
states.forEach (state) ->
  state.humanizedCash = Humanize.compactInteger(state.cash, 1)
  state.humanizedProfit = Humanize.compactInteger(state.profit, 1)
  state.humanizedEarningsPerShare = Humanize.compactInteger(state.earningsPerShare, 1)

sectors = (value for key,value of sectors)
sectors.forEach (sector) ->
  sector.humanizedCash = Humanize.compactInteger(sector.cash, 1)

states.sort (state1, state2) -> state2.cash - state1.cash
topCashStates = states[0...10]

companies.sort (company1, company2) ->
  (company2.cash?[2013] ? 0) - (company1.cash?[2013] ? 0)
topCashCompanies = companies[0...10]

sectors.sort (sector1, sector2) -> sector2.cash - sector1.cash
topCashSectors = sectors[0...10]

states.sort (state1, state2) -> state2.profit - state1.profit

indexTemplateData = {
  states
  companies: companies.length
  topCashStates
  topCashCompanies
  topCashSectors
}

fs.writeFileSync(path.resolve(__dirname, '..', "index.html"), indexTemplate(indexTemplateData))
progress.tick(1)
