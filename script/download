#!/usr/bin/env coffee

_          = require 'underscore'
async      = require 'async'
fs         = require 'fs-plus'
Document   = require('xmldom').DOMParser
Handlebars = require 'handlebars'
path       = require 'path'
request    = require 'request'
url        = require 'url'
xpath      = require 'xpath'

debug = false
currentYear = new Date().getFullYear()

isInLastFiveYears = (year) ->
  currentYear - 5 <= year <= currentYear

parseYear = (year) ->
  year = parseInt(year)
  return year if isInLastFiveYears(year)

yearFromRange = (fromDate, toDate) ->
  return if isNaN(fromDate)
  return if isNaN(toDate)

  day = 24 * 60 * 60 * 1000
  days = (toDate - fromDate) / day
  return unless 350 < days < 400

  year = new Date(toDate).getFullYear()
  return year if isInLastFiveYears(year)

yearFromDate = (date) ->
  return if isNaN(date)

  year = new Date(date).getFullYear()
  return year if isInLastFiveYears(year)

yearOfNode = (document, node) ->
  contextRef = xpath.select('string(@contextRef)', node).toString()
  return unless contextRef

  [context] = xpath.select("//*[local-name()='context' and @id='#{contextRef}']", document)
  if context
    startDate = Date.parse(xpath.select("*[local-name()='period']/*[local-name()='startDate']/text()", context).toString())
    endDate = Date.parse(xpath.select("*[local-name()='period']/*[local-name()='endDate']/text()", context).toString())
    if year = yearFromRange(startDate, endDate)
      return year

    instant = Date.parse(xpath.select("*[local-name()='period']/*[local-name()='instant']/text()", context).toString())
    yearFromDate(instant)

getProfits = (document) ->
  profits = {}

  elements = [
    'NetIncomeLoss'
    'NetIncomeLossAvailableToCommonStockholdersBasic'
    'NetIncomeLossAvailableToCommonStockholdersDiluted'
    'IncomeLossFromContinuingOperationsIncludingPortionAttributableToNoncontrollingInterest'
    'ProfitLoss'
    'IncomeLossAttributableToParent'
  ]
  for element in elements
    nodes = xpath.select("//*[local-name()='#{element}']", document)
    for node in nodes when node.prefix is 'us-gaap'
      profit = parseFloat(node.firstChild?.data)
      continue if isNaN(profit)

      if year = yearOfNode(document, node)
        profits[year] ?= profit

  profits

getCash = (document) ->
  cashes = {}

  elements = [
    'CashAndCashEquivalentsAtCarryingValue'
    'CashAndCashEquivalentsAtCarryingValueIncludingDiscontinuedOperations'
  ]
  for element in elements
    nodes = xpath.select("//*[local-name()='#{element}']", document)
    for node in nodes when node.prefix is 'us-gaap'
      cash = parseFloat(node.firstChild?.data)
      continue if isNaN(cash)

      if year = yearOfNode(document, node)
        cashes[year] ?= cash

  cashes

getEarningPerShare = (document) ->
  eps = {}

  elements = [
    'EarningsPerShareBasic'
  ]
  for element in elements
    nodes = xpath.select("//*[local-name()='#{element}']", document)
    for node in nodes when node.prefix is 'us-gaap'
      earningsPerShare = parseFloat(node.firstChild?.data)
      continue if isNaN(earningsPerShare)

      if year = yearOfNode(document, node)
        eps[year] ?= earningsPerShare

  eps

getAddress = (select, document) ->
  address = {}

  [addressElement] = select('//atom:company-info/atom:addresses/atom:address[@type=\'business\']', document)
  if not addressElement? or select('count(*)', addressElement) is 0
    [addressElement] = select('//atom:company-info/atom:addresses/atom:address[@type=\'mailing\']', document)

  address.street1 = select('atom:street1/text()', addressElement).toString()
  street2 = select('atom:street2/text()', addressElement).toString()
  if street2 and street2 isnt address.street1
    address.street2 = street2

  address.city = select('atom:city/text()', addressElement).toString()
  address.state = select('atom:state/text()', addressElement).toString()
  if zip = select('atom:zip/text()', addressElement).toString()
    address.zip = zip

  address

downloadTenK = ({pageUrl, symbol}, callback) ->
  console.log ">> Downloading 10-K page" if debug
  request pageUrl, (error, response, body='') ->
    reportName = body.match(new RegExp("\"([^\"]*#{symbol.toLowerCase()}-\\d+\\.xml)\"", 'i'))?[1]
    # Fall back to any XML file with format of letters followed by a - followed numbers
    reportName ?= body.match(new RegExp("\"([^\"]*[a-zA-Z]+-\\d+\\.xml)\"", 'i'))?[1]
    return callback(null, {}) unless reportName

    xmlUrl = url.resolve(pageUrl, reportName)
    console.log ">> Downloading 10-K filing" if debug
    request xmlUrl, (error, response, body) ->
      return callback(error) if error?
      if response.statusCode isnt 200
        return callback(new Error("Request to #{xmlUrl} failed: #{response.statusCode}"))

      reportDocument = new Document().parseFromString(body)

      cash = getCash(reportDocument)
      earningsPerShare = getEarningPerShare(reportDocument)
      profit = getProfits(reportDocument)
      callback(null, {cash, earningsPerShare, profit, xmlUrl})

getTenKFeed = (symbol, callback) ->
  console.log ">> Fetching 10-K feed" if debug
  options =
    uri: "http://www.sec.gov/cgi-bin/browse-edgar"
    qs:
      action: 'getcompany'
      CIK:    symbol
      count:  10
      output: 'atom'
      owner:  'exclude'
      type:   '10-K'

  request.get options, (error, response, body='') ->
    return callback(error) if error?

    if response.headers['content-type'] isnt 'application/atom+xml'
      return callback(new Error("Non-XML feed returned for #{symbol}: #{response.headers['content-type']}"))

    document = new Document().parseFromString(body)
    select = xpath.useNamespaces(atom: 'http://www.w3.org/2005/Atom')
    callback(null, document, select)

downloadSymbol = (company, callback) ->
  getTenKFeed company.symbol, (error, document, select) ->
    return callback(error) if error?

    hrefs = select("//atom:filing-href/text()", document)
    if hrefs.length is 0
      return callback(new Error("No 10-K submissions for #{company.symbol}"))

    hrefs = hrefs.map (href) -> href.toString()
    address = getAddress(select, document)

    urlsToDownload = hrefs.map (pageUrl) ->
      pageUrl: pageUrl
      symbol: company.symbol

    async.map urlsToDownload.reverse(), downloadTenK, (error, data) ->
      console.log ">> Parsing downloaded filings" if debug
      return callback(error) if error?

      profit = _.extend({}, _.pluck(data, 'profit')...)
      if Object.keys(profit).length is 0
        return callback(new Error("No profits for #{company.symbol}"))
      cash = _.extend({}, _.pluck(data, 'cash')...)
      earningsPerShare = _.extend({}, _.pluck(data, 'earningsPerShare')...)

      company.category = select("//atom:assigned-sic-desc/text()", document)[0]?.toString()
      company.address = address
      company.profit = profit
      company.cash = cash
      company.earningsPerShare = earningsPerShare
      company.htmlUrl = select("//atom:filing-href/text()", document)[0].toString()
      company.xmlUrl = _.last(data).xmlUrl
      writeCompany(company, callback)

writeCompany = (company, callback) ->
  companyPath = path.resolve(__dirname, '..', 'company', "#{company.symbol}.json")
  companyJson = JSON.stringify(company, null, 2)
  fs.writeFile(companyPath, companyJson, callback)

symbols = JSON.parse(fs.readFileSync('symbols.json'))
companies = JSON.parse(fs.readFileSync('companies.json'))
companies = companies.filter ({symbol}) -> symbols.indexOf(symbol.toUpperCase()) isnt -1
companies.forEach (company) -> company.symbol = company.symbol.toLowerCase()

if process.argv[2]
  companies = companies.filter ({symbol}) -> symbol is process.argv[2]
else
  companies = companies.filter ({symbol}) -> not fs.isFileSync(path.resolve(__dirname, '..', 'company', "#{symbol}.json"))

queue = async.queue (company, callback) ->
  console.log "Processing #{company.name} (#{company.symbol})"
  downloadSymbol company, (error) ->
    console.error(error.message) if error?
    console.log "Finished #{company.name} (#{company.symbol})"
    callback(error)

queue.push(company) for company in companies
queue.concurrency = 5
