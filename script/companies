#!/usr/bin/env coffee

_           = require 'underscore'
async       = require 'async'
{DOMParser} = require 'xmldom'
fs          = require 'fs'
ProgressBar = require 'progress'
request     = require 'request'
xpath       = require 'xpath'

# Download a master company list from all exchanges
downloadCompanies = (callback) ->
  exchangeNames = ['nasdaq', 'amex', 'nyse']
  progress = new ProgressBar('Downloading :total exchanges [:bar] :percent :eta seconds remaining', {
    incomplete: ' '
    width: 20
    total: exchangeNames.length
  })

  async.map exchangeNames, downloadExchange, (error, exchanges) ->
    progress.tick(1)
    if error?
      callback(error)
    else
      callback(null, _.flatten(exchanges))

# Download all symbols on the given exchange
downloadExchange = (exchange, callback) ->
  uri = "http://www.nasdaq.com/screening/companies-by-name.aspx?letter=0&exchange=#{exchange}&render=download"
  request uri, (error, response, body) ->
    return callback(error) if error?

    lines =  body.split('\n')
    lines.shift() # First line has column names
    symbols = []
    for line in lines
      segments = line.split('","')
      symbol   = segments[0].substring(1).trim() # Remove leading "
      name     = segments[1]
      ipoYear  = parseInt(segments[5])
      sector   = segments[6]
      industry = segments[7]
      symbols.push({symbol, name, ipoYear, sector, industry, exchange})

    callback(null, symbols)

downloadCompanies (error, companies) ->
  companies = companies.filter ({symbol}) -> symbol
  companies.forEach (company) ->
    delete company.sector   if company.sector is 'n/a'
    delete company.industry if company.industry is 'n/a'

  companiesJson = JSON.stringify(companies, null, 2)
  fs.writeFileSync('companies.json', companiesJson)
