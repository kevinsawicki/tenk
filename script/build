#!/usr/bin/env coffee

fs       = require 'fs-plus'
Document = require('xmldom').DOMParser
path     = require 'path'
request  = require 'request'
url      = require 'url'
xpath    = require 'xpath'

currentYear = new Date().getFullYear()

isInLastFiveYears = (year) ->
  currentYear - 5 <= year <= currentYear

parseYear = (year) ->
  year = parseInt(year)
  return year if isInLastFiveYears(year)

yearFromRange = (fromDate, toDate) ->
  return if isNaN(fromDate)
  return if isNaN(toDate)

  day = 24 * 60 * 60 * 1000
  days = (toDate - fromDate) / day
  return unless 350 < days < 400

  year = new Date(toDate).getFullYear()
  return year if isInLastFiveYears(year)

yearOfNode = (document, node) ->
  contextRef = xpath.select('string(@contextRef)', node).toString()
  return unless contextRef

  [context] = xpath.select("//*[local-name()='context' and @id='#{contextRef}']", document)
  if context
    startDate = Date.parse(xpath.select("*[local-name()='period']/*[local-name()='startDate']/text()", context).toString())
    endDate = Date.parse(xpath.select("*[local-name()='period']/*[local-name()='endDate']/text()", context).toString())
    yearFromRange(startDate, endDate)

getProfits = (xml) ->
  document = new Document().parseFromString(xml)
  profits = {}

  elements = [
    'NetIncomeLoss'
    'NetIncomeLossAvailableToCommonStockholdersBasic'
    'NetIncomeLossAvailableToCommonStockholdersDiluted'
    'IncomeLossFromContinuingOperationsIncludingPortionAttributableToNoncontrollingInterest'
    'ProfitLoss'
    'IncomeLossAttributableToParent'
  ]
  for element in elements
    nodes = xpath.select("//*[local-name()='#{element}']", document)
    for node in nodes when node.prefix is 'us-gaap'
      profit = parseFloat(node.firstChild?.data)
      continue if isNaN(profit)

      if year = yearOfNode(document, node)
        profits[year] ?= profit

  profits

getAddress = (select, document) ->
  address = {}

  [addressElement] = select('//atom:company-info/atom:addresses/atom:address[@type=\'business\']', document)
  if not addressElement? or select('count(*)', addressElement) is 0
    [addressElement] = select('//atom:company-info/atom:addresses/atom:address[@type=\'mailing\']', document)

  address.street1 = select('atom:street1/text()', addressElement).toString()
  street2 = select('atom:street2/text()', addressElement).toString()
  if street2 and street2 isnt address.street1
    address.street2 = street2

  address.city = select('atom:city/text()', addressElement).toString()
  address.state = select('atom:state/text()', addressElement).toString()
  if zip = select('atom:zip/text()', addressElement).toString()
    address.zip = zip

  address

getTenKUrl = (symbol) ->
  options =
    uri: "http://www.sec.gov/cgi-bin/browse-edgar"
    qs:
      action: 'getcompany'
      CIK:    symbol
      count:  1
      output: 'atom'
      owner:  'exclude'
      type:   '10-K'

  request.get options, (error, response, body='') ->
    document = new Document().parseFromString(body)
    select = xpath.useNamespaces(atom: 'http://www.w3.org/2005/Atom')
    filingHref = select("//atom:filing-href/text()", document)[0].toString()
    name = select("//atom:conformed-name/text()", document)[0].toString()
    pageUrl = url.resolve(filingHref, '.')

    request pageUrl, (error, response, body='') ->
      reportName = body.match(new RegExp("\"([^\"]*#{symbol.toLowerCase()}-\\d+\\.xml)\"", 'i'))[1]
      reportUrl = url.resolve(pageUrl, reportName)

      request reportUrl, (error, response, body) ->
        profits = getProfits(body)
        address = getAddress(select, document)
        company = {symbol, name, profits, address}
        fs.writeFileSync(path.resolve(__dirname, '..', 'companies', "#{symbol}.json"), JSON.stringify(company, null, 2))

        console.log name
        console.log address
        console.log profits

getTenKUrl('orcl')
