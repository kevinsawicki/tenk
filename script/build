#!/usr/bin/env coffee

fs         = require 'fs-plus'
Handlebars = require 'handlebars'
Humanize   = require 'humanize-plus'
path       = require 'path'

Handlebars.registerHelper 'cash_graph',   require('../src/cash-graph')
Handlebars.registerHelper 'cash_map',   require('../src/cash-map')
Handlebars.registerHelper 'eps_graph',    require('../src/eps-graph')
Handlebars.registerHelper 'google_map',   require('../src/google-map')
Handlebars.registerHelper 'profit_graph', require('../src/profit-graph')

companyTemplate = Handlebars.compile(fs.readFileSync(path.resolve(__dirname, '..', 'company', 'company.hbs'), 'utf8'))

companies = []

buildPage = (symbolPath) ->
  symbol = path.basename(symbolPath, path.extname(symbolPath))
  company = JSON.parse(fs.readFileSync(symbolPath, 'utf8'))
  companies.push(company)
  fs.writeFileSync(path.resolve(__dirname, '..', 'company', "#{symbol}.html"), companyTemplate(company))

fs.listSync(path.resolve(__dirname, '..', 'company'), ['.json']).forEach(buildPage)

indexTemplate = Handlebars.compile(fs.readFileSync(path.resolve(__dirname, '..', 'index.hbs'), 'utf8'))

states = {}
companies.forEach ({symbol, address, profit, cash, earningsPerShare}) ->
  profit = profit?[2013] ? 0
  cash = cash?[2013] ? 0
  earningsPerShare = earningsPerShare?[2013] ? 0

  states[address.state] ?=
    state: address.state
    cash: 0
    profit: 0
    earningsPerShare: 0
    companies: 0
  states[address.state].cash += cash
  states[address.state].profit += profit
  states[address.state].earningsPerShare += earningsPerShare
  states[address.state].companies += 1

states = (value for key, value of states)
states.forEach (state) ->
  state.humanizedCash = Humanize.compactInteger(state.cash, 1)
  state.humanizedProfit = Humanize.compactInteger(state.profit, 1)
  state.humanizedEarningsPerShare = Humanize.compactInteger(state.earningsPerShare, 1)
states.sort (state1, state2) -> state2.profit - state1.profit

fs.writeFileSync(path.resolve(__dirname, '..', "index.html"), indexTemplate({states}))
